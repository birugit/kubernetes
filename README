1)Google cloud console
        Create a project
2)Kubernetesâ€”>Create cluster

3)Shell
      a) clone git repository
      b)build the project
           ./mvnw clean install
       c) check the jar created at target folder
            cd target
      d) Run jar to make spring app up
            java -jar jarname
    1.  Go to webpreview ( which helps in launching app url)
    2. https://8080-dot-9414945-dot-devshell.appspot.com/?authuser=0&environment_name=default
    3. Change above url with endpoint
        1. https://8080-dot-9414945-dot-devshell.appspot.com/hello
        2. Stop the service by control + Z 
4.Create a image and copy to Container registry
5. ./mvnw com.google.cloud.tools:jib-maven-plugin:build -Dimage=gcr.io/$GOOGLE_CLOUD_PROJECT/springboot-test:v1
                    or
        ./mvnw com.google.cloud.tools:jib-maven-plugin:build -Dimage=gcr.io/upheld-conduit-256805/spring-boot-example:v1
6. Verify the Container Registry updated with image
7. Command to login to the K8s cluster from Cloud Shell
     gcloud container clusters get-credentials test-cluster-1 --zone us-central1-a
/kubernetes$ gcloud container clusters get-credentials test-cluster-1 --zone us-central1-aERROR: (gcloud.container.clusters.get-credentials) The project property is set to the empty string, which is invalid.To set your project, run: $ gcloud config set project PROJECT_IDor to unset it, run: $ gcloud config unset project
$gcloud config set project upheld-conduit-256805

8. Verify weather connected to cluster or not
        kubectl get pods
List Services

kubectl get services

List Deployments

kubectl get deployments


Run the Docker image
Command to run the docker image which we created in the previous step
docker run -ti --rm -p 8080:8080 gcr.io/$GOOGLE_CLOUD_PROJECT/spring-boot-example:v1

docker run -ti --rm -p 8080:8080 gcr.io/upheld-conduit-256805/spring-boot-example:v1

Check the application from web preview, app should work from local docker image

Stop the Service: control + C

Deploy an image
kubectl run spring-boot-example --image=gcr.io/$GOOGLE_CLOUD_PROJECT/spring-boot-example:v1 --port=8080
kubectl run spring-boot-example --image=gcr.io/upheld-conduit-256805/spring-boot-example:v1 --port=8080
Note:
kubectl run --generator=deployment/apps.v1 is DEPRECATED and will be removed in a future version. Use kubectl run --generator=run-pod/v1 or kubectl create instead.
deployment.apps/spring-boot-example created

Check the Deployments:
kubectl get deployments
)$ kubectl get deployments
NAME                     READY     UP-TO-DATE AVAILABLE     AGE
spring-boot-example        1/1         1        1           2m9s

Check the pods:
kubectl get pods
$ kubectl get pods
NAME                                    READY         STATUS         RESTARTS         AGE
spring-boot-example-74bf78d8d-t5tmn     1/1             Running          0           3m52s



Pods are not able to connect, for that need to create a service and load balancer, which creates external IP.
Expose Load Balancer

kubectl expose deployment spring-boot-example --type=LoadBalancer
$ kubectl expose deployment spring-boot-example --type=LoadBalancer
service/spring-boot-example exposed

Now check the services again to see load balancer with external IP
$ kubectl get services
NAME                             TYPE                 CLUSTER-IP         EXTERNAL-IP         PORT(S)                AGE
kubernetes                     ClusterIP             10.106.0.1             <none>                 443/TCP          6h30m
spring-boot-example             LoadBalancer         10.106.3.224        104.197.206.67     8080:32551/TCP          3m28s

Access the app with external IP
104.197.206.67:8080/

Scale deployments

kubectl scale deployment spring-boot-example --replicas=3
$ kubectl scale deployment spring-boot-example --replicas=3deployment.extensions/spring-boot-example scaled

$ kubectl get pods
NAME                                        READY                 STATUS                 RESTARTS             AGE
spring-boot-example-74bf78d8d-7mswr         1/1                  Running                    0                  28s
spring-boot-example-74bf78d8d-t5tmn         1/1                  Running                    0                  21m
spring-boot-example-74bf78d8d-z2bfx         1/1                  Running                    0                  28s

$ kubectl get deployments
NAME                             READY             UP-TO-DATE             AVAILABLE             AGE
spring-boot-example              3/3                    3                      3                 23m

$$$$$$$$$$


YML 
**Link to Brandon Potter's YML builder** - https://static.brandonpotter.com/kubernetes/DeploymentBuilder.html


$ gcloud container clusters get-credentials test-cluster-1 --zone us-central1-a
Fetching cluster endpoint and auth data.kubeconfig entry generated for test-cluster-1.
biruusa@cloudshell:~/kubernetes/target (upheld-conduit-256805)$ kubectl get pods
No resources found.
biruusa@cloudshell:~/kubernetes/target (upheld-conduit-256805)$ kubectl get services
NAME                                         TYPE                 CLUSTER-IP                 EXTERNAL-IP                             PORT(S)             AGE
kubernetes                                 ClusterIP                 10.106.0.1                 <none>                                     443/TCP                    133m
biruusa@cloudshell:~/kubernetes/target (upheld-conduit-256805)$ kubectl get deployment
No resources found.

Apply/create xml to generate pods, service n deployment
biruusa@cloudshell:~/kubernetes/target (upheld-conduit-256805)$ kubectl apply -f deployment.yml
deployment.extensions/spring-boot-example created

kubectl apply -f service.yml

**Depoyment.yml**
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: spring-boot-example
spec:
  replicas: 3
  template:
    metadata:
      labels:
        app: spring-boot-example
    spec:
      containers:
        - name: spring-boot-example
          image: 'gcr.io/fleet-resolver-237016/spring-boot-example:v1'
          ports:
            - containerPort: 8080
            
 **Service.yml**
 apiVersion: v1
kind: Service
metadata:
  name: spring-boot-example
  labels:
    name: spring-boot-example
spec:
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
  selector:
    app: spring-boot-example
  type: LoadBalancer
  
**Depoyment strategies**
Rollingupdate
Recreate
BlueGreen
Canary

**Recreate Strategy**
**kube.yml**
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: spring-boot-example
spec:
  replicas: 3
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: spring-boot-example
    spec:
      containers:
        - name: spring-boot-example
          image: 'gcr.io/fleet-resolver-237016/spring-boot-example:v1'
          ports:
            - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: spring-boot-example
  labels:
    name: spring-boot-example
spec:
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
  selector:
    app: spring-boot-example
  type: LoadBalancer
  
  **Rollingupdate**
  **kube.yml**
  apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: spring-boot-example
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  template:
    metadata:
      labels:
        app: spring-boot-example
    spec:
      containers:
        - name: spring-boot-example
          image: 'gcr.io/fleet-resolver-237016/spring-boot-example:v1'
          ports:
            - containerPort: 8080
          readinessProbe:
            httpGet:
              path: /lazy
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: spring-boot-example
  labels:
    name: spring-boot-example
spec:
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
  selector:
    app: spring-boot-example
  type: LoadBalancer
  
  
  **Blue Green Deployment**
  **deployment-blue-v1.yml**
  apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: spring-boot-example-v1
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  template:
    metadata:
      labels:
        app: spring-boot-example
        version: "v1"
    spec:
      containers:
        - name: spring-boot-example
          image: 'gcr.io/fleet-resolver-237016/spring-boot-example:v1'
          ports:
            - containerPort: 8080
          readinessProbe:
            httpGet:
              path: /lazy
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 5
            
  **service-blue-v1.yml**
  apiVersion: v1
kind: Service
metadata:
  name: spring-boot-example
  labels:
    name: spring-boot-example
    version: "v1"
spec:
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
  selector:
    app: spring-boot-example
    version: "v1"
  type: LoadBalancer
  
  **Deployment-green-v2.yml**
  apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: spring-boot-example-v2
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  template:
    metadata:
      labels:
        app: spring-boot-example
        version: "v2"
    spec:
      containers:
        - name: spring-boot-example
          image: 'gcr.io/fleet-resolver-237016/spring-boot-example:v2'
          ports:
            - containerPort: 8080
          readinessProbe:
            httpGet:
              path: /lazy
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 5
            
            
**service-green-v2.yml**
apiVersion: v1
kind: Service
metadata:
  name: spring-boot-example-green
  labels:
    name: spring-boot-example-green
    version: "v2"
spec:
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
  selector:
    app: spring-boot-example
    version: "v2"
  type: LoadBalancer
  
 **deployment-blue-v2.yml**
 apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: spring-boot-example-v2
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  template:
    metadata:
      labels:
        app: spring-boot-example
        version: "v2"
    spec:
      containers:
        - name: spring-boot-example
          image: 'gcr.io/fleet-resolver-237016/spring-boot-example:v2'
          ports:
            - containerPort: 8080
          readinessProbe:
            httpGet:
              path: /lazy
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 5
            
 **service-blue-v2.yml**
 apiVersion: v1
kind: Service
metadata:
  name: spring-boot-example
  labels:
    name: spring-boot-example
    version: "v2"
spec:
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
  selector:
    app: spring-boot-example
    version: "v2"
  type: LoadBalancer
  
  **commands**
  kubectl apply -f deployment-blue-v1.yml
kubectl apply -f service-blue-v1.yml
kubectl apply -f deployment-green-v2.yml
kubectl apply -f service-green-v2.yml
kubectl apply -f deployment-blue-v2.yml
kubectl apply -f service-blue-v2.yml
kubectl delete deployment.apps/spring-boot-example-v1 service/spring-boot-example-green

**Canary Deployment**
**Type 1**
kuber-v1.yml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: spring-boot-example-v1
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  template:
    metadata:
      labels:
        app: spring-boot-example
        version: "v1"
    spec:
      containers:
        - name: spring-boot-example
          image: 'gcr.io/fleet-resolver-237016/spring-boot-example:v1'
          ports:
            - containerPort: 8080
          readinessProbe:
            httpGet:
              path: /lazy
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: spring-boot-example
  labels:
    name: spring-boot-example
    version: "v1"
spec:
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
  selector:
    app: spring-boot-example
    version: "v1"
  type: LoadBalancer
  
  
  **deployment-v2.yml**
  apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: spring-boot-example-v2
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  template:
    metadata:
      labels:
        app: spring-boot-example
        version: "v2"
    spec:
      containers:
        - name: spring-boot-example
          image: 'gcr.io/fleet-resolver-237016/spring-boot-example:v2'
          ports:
            - containerPort: 8080
          readinessProbe:
            httpGet:
              path: /lazy
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 5
            
 **update service to remove version tag. service-v1.yml**
 apiVersion: v1
kind: Service
metadata:
  name: spring-boot-example
  labels:
    name: spring-boot-example
spec:
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
  selector:
    app: spring-boot-example
  type: LoadBalancer
  
  **add "v2" for version in the Service object service-v2.yml**
  apiVersion: v1
kind: Service
metadata:
  name: spring-boot-example
  labels:
    name: spring-boot-example
    version: "v2"
spec:
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
  selector:
    app: spring-boot-example
    version: "v2"
  type: LoadBalancer
  
  **commands**
  kubectl apply -f kube-v1.yml
kubectl apply -f deployment-v2.yml
`kubectl apply -f service-v1.yml
`kubectl apply -f service-v2.yml
  
  
